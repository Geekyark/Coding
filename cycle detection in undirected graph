#include<bits/stdc++.h>
using namespace std;


bool iscycleDFS(vector<vector<int>> &adj,vector<int> &visited,int curr)
{
    queue<int> q;
    q.push(curr);
    visited[curr] = 0;
    while(!q.empty())
    {
        int top = q.front();
        q.pop();
        visited[top] = 1;
        for(int i=0;i<adj[top].size();i++)
        {
            int t = adj[top][i];
            if(visited[t] == 0)
               return true;
            if(visited[t] != 1)
            {
                visited[t] = 0;
                q.push(t);
            }
        }
    }
    return false;
}
bool isCyclic(vector<vector<int>> &edge) {
   
    int n = edge.size();
    vector<vector<int> > adj(n+1);
    vector<int> visited(n+1,-1);
    for(int i=0;i<n;i++)
    {
        adj[edge[i][0]].push_back(edge[i][1]);
        adj[edge[i][1]].push_back(edge[i][0]);    
    }
    for(int i=1;i<=n;i++)
    {
       if(iscycleDFS(adj,visited,1))
         return true;
    }
    return false;
}


int main(){
    int tc;
    cin>>tc;
    while(tc--){
        int n;
        cin>>n;
        vector<vector<int>>edge(n,vector<int>(n,1));
        for(int i=0;i<n;i++){
            cin>>edge[i][0]>>edge[i][1];
        }
        cout<<isCyclic(edge);
    }
}
